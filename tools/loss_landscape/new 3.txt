/home/liuy6/anaconda3/envs/yy/bin/python3 /home/liuy6/.pycharm_helpers/pydev/pydevd.py --multiprocess --qt-support=auto --client localhost --port 40773 --file /home/liuy6/host/mmdetection/tools/loss_landscape/test_loss.py ../../configs/pascal_voc/faster-rcnn_loss_landscape.py ../../checkpoints/faster_rcnn_r50_fpn_1x_voc0712_20220320_192712-54bef0f3.pth 
Connected to pydev debugger (build 223.8214.51)
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
09/23 09:23:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1762832075
    GPU 0,1: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 1.10.1
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/23 09:23:22 - mmengine - INFO - Config:
model = dict(
    type='LossFasterRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=20,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'VOCDataset'
data_root = '/home/liuy6/host/causal_rodc/data/'
backend_args = None
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(1000, 600), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='VOCDataset',
        data_root='/home/liuy6/host/causal_rodc/data/',
        ann_file='VOC2007/ImageSets/Main/train.txt',
        data_prefix=dict(sub_data_root='VOC2007/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32, bbox_min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1000, 600), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='VOCDataset',
        data_root='/home/liuy6/host/causal_rodc/data/',
        ann_file='VOC2007/ImageSets/Main/train.txt',
        data_prefix=dict(sub_data_root='VOC2007/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32, bbox_min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1000, 600), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
train_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='VOCDataset',
        data_root='/home/liuy6/host/causal_rodc/data/',
        ann_file='VOC2007/ImageSets/Main/train.txt',
        data_prefix=dict(sub_data_root='VOC2007/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32, bbox_min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1000, 600), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
val_evaluator = dict(type='CollectLossMetric')
test_evaluator = dict(type='CollectLossMetric')
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=1),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='TensorboardVisBackend'),
    dict(type='LocalVisBackend')
]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='TensorboardVisBackend'),
        dict(type='LocalVisBackend')
    ],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = '../../checkpoints/faster_rcnn_r50_fpn_1x_voc0712_20220320_192712-54bef0f3.pth'
resume = False
max_epochs = 4
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=4, val_interval=1)
val_cfg = dict(type='ValLossLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='MultiStepLR',
        begin=0,
        end=4,
        by_epoch=True,
        milestones=[3],
        gamma=0.1)
]
custom_hooks = [dict(type='PlotLossHook')]
optim_wrapper = dict(
    type='LossOptimWrapper',
    optimizer=dict(
        type='LandScape',
        x_min=-0.1,
        x_max=0.1,
        x_num=11,
        y_min=-0.1,
        y_max=0.1,
        y_num=11))
auto_scale_lr = dict(enable=False, base_batch_size=16)
launcher = 'none'
work_dir = './work_dirs/faster-rcnn_loss_landscape'

09/23 09:23:28 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/23 09:23:28 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) PlotLossHook                       
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(NORMAL      ) PlotLossHook                       
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/23 09:23:34 - mmengine - WARNING - The prefix is not set in metric class CollectLossMetric.
Loads checkpoint by local backend from path: ../../checkpoints/faster_rcnn_r50_fpn_1x_voc0712_20220320_192712-54bef0f3.pth
The model and loaded state dict do not match exactly

size mismatch for neck.lateral_convs.0.conv.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([255, 256, 1, 1]).
size mismatch for neck.lateral_convs.0.conv.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([255]).
size mismatch for neck.lateral_convs.1.conv.weight: copying a param with shape torch.Size([256, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([255, 512, 1, 1]).
size mismatch for neck.lateral_convs.1.conv.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([255]).
size mismatch for neck.lateral_convs.2.conv.weight: copying a param with shape torch.Size([256, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([255, 1024, 1, 1]).
size mismatch for neck.lateral_convs.2.conv.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([255]).
size mismatch for neck.lateral_convs.3.conv.weight: copying a param with shape torch.Size([256, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([255, 2048, 1, 1]).
size mismatch for neck.lateral_convs.3.conv.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([255]).
missing keys in source state_dict: neck.ln_convs.0.conv.weight, neck.ln_convs.0.conv.bias, neck.ln_convs.1.conv.weight, neck.ln_convs.1.conv.bias, neck.ln_convs.2.conv.weight, neck.ln_convs.2.conv.bias, neck.ln_convs.3.conv.weight, neck.ln_convs.3.conv.bias

09/23 09:23:37 - mmengine - INFO - Load checkpoint from ../../checkpoints/faster_rcnn_r50_fpn_1x_voc0712_20220320_192712-54bef0f3.pth
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
pydev debugger: warning: trying to add breakpoint to file that does not exist: /home/liuy6/host/mmdetection/tools/mmengine-main/mmengine/optim/optimizer/optimizer_wrapper.py (will have no effect)
09/23 09:23:51 - mmengine - INFO - Epoch(test) [   1/2501]    eta: 9:41:17  time: 13.9511  data_time: 13.0512  memory: 350  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   2/2501]    eta: 5:56:25  time: 8.5574  data_time: 8.0694  memory: 325  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   3/2501]    eta: 3:58:12  time: 5.7216  data_time: 5.3807  memory: 385  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   4/2501]    eta: 2:59:04  time: 4.3030  data_time: 4.0370  memory: 349  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   5/2501]    eta: 2:23:39  time: 3.4532  data_time: 3.2310  memory: 358  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   6/2501]    eta: 2:00:01  time: 2.8864  data_time: 2.6937  memory: 330  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   7/2501]    eta: 1:43:12  time: 2.4831  data_time: 2.3113  memory: 369  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   8/2501]    eta: 1:30:31  time: 2.1788  data_time: 2.0233  memory: 325  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [   9/2501]    eta: 1:20:39  time: 1.9420  data_time: 1.7991  memory: 385  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [  10/2501]    eta: 1:12:46  time: 1.7529  data_time: 1.6198  memory: 343  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [  11/2501]    eta: 1:06:18  time: 1.5979  data_time: 1.4730  memory: 350  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [  12/2501]    eta: 1:00:55  time: 1.4688  data_time: 1.3508  memory: 350  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [  13/2501]    eta: 0:56:26  time: 1.3613  data_time: 1.2488  memory: 354  
09/23 09:23:54 - mmengine - INFO - Epoch(test) [  14/2501]    eta: 0:52:35  time: 1.2690  data_time: 1.1615  memory: 350  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  15/2501]    eta: 0:49:15  time: 1.1889  data_time: 1.0855  memory: 293  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  16/2501]    eta: 0:46:17  time: 1.1176  data_time: 1.0181  memory: 325  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  17/2501]    eta: 0:43:39  time: 1.0546  data_time: 0.9585  memory: 354  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  18/2501]    eta: 0:41:19  time: 0.9988  data_time: 0.9056  memory: 350  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  19/2501]    eta: 0:39:15  time: 0.9489  data_time: 0.8582  memory: 312  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  20/2501]    eta: 0:37:22  time: 0.9039  data_time: 0.8156  memory: 350  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  21/2501]    eta: 0:35:42  time: 0.8640  data_time: 0.7779  memory: 330  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  22/2501]    eta: 0:34:16  time: 0.8296  data_time: 0.7444  memory: 325  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  23/2501]    eta: 0:32:53  time: 0.7965  data_time: 0.7129  memory: 350  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  24/2501]    eta: 0:31:37  time: 0.7661  data_time: 0.6838  memory: 385  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  25/2501]    eta: 0:30:30  time: 0.7392  data_time: 0.6573  memory: 292  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  26/2501]    eta: 0:29:25  time: 0.7132  data_time: 0.6329  memory: 385  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  27/2501]    eta: 0:28:23  time: 0.6887  data_time: 0.6097  memory: 323  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  28/2501]    eta: 0:27:27  time: 0.6660  data_time: 0.5884  memory: 330  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  29/2501]    eta: 0:26:33  time: 0.6447  data_time: 0.5683  memory: 350  
09/23 09:23:55 - mmengine - INFO - Epoch(test) [  30/2501]    eta: 0:25:44  time: 0.6249  data_time: 0.5495  memory: 319  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  31/2501]    eta: 0:24:57  time: 0.6062  data_time: 0.5320  memory: 312  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  32/2501]    eta: 0:24:13  time: 0.5888  data_time: 0.5156  memory: 350  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  33/2501]    eta: 0:23:32  time: 0.5725  data_time: 0.5002  memory: 325  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  34/2501]    eta: 0:22:54  time: 0.5571  data_time: 0.4857  memory: 350  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  35/2501]    eta: 0:22:19  time: 0.5434  data_time: 0.4728  memory: 350  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  36/2501]    eta: 0:21:45  time: 0.5298  data_time: 0.4599  memory: 326  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  37/2501]    eta: 0:21:13  time: 0.5168  data_time: 0.4476  memory: 325  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  38/2501]    eta: 0:20:42  time: 0.5046  data_time: 0.4360  memory: 306  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  39/2501]    eta: 0:20:13  time: 0.4929  data_time: 0.4250  memory: 325  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  40/2501]    eta: 0:19:45  time: 0.4817  data_time: 0.4145  memory: 355  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  41/2501]    eta: 0:19:20  time: 0.4718  data_time: 0.4048  memory: 339  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  42/2501]    eta: 0:18:58  time: 0.4629  data_time: 0.3958  memory: 350  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  43/2501]    eta: 0:18:36  time: 0.4542  data_time: 0.3871  memory: 325  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  44/2501]    eta: 0:18:14  time: 0.4455  data_time: 0.3787  memory: 325  
09/23 09:23:56 - mmengine - INFO - Epoch(test) [  45/2501]    eta: 0:17:54  time: 0.4376  data_time: 0.3710  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  46/2501]    eta: 0:17:35  time: 0.4301  data_time: 0.3635  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  47/2501]    eta: 0:17:18  time: 0.4231  data_time: 0.3562  memory: 337  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  48/2501]    eta: 0:16:59  time: 0.4155  data_time: 0.3492  memory: 343  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  49/2501]    eta: 0:16:40  time: 0.4081  data_time: 0.3422  memory: 336  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  50/2501]    eta: 0:16:22  time: 0.4009  data_time: 0.3355  memory: 385  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  51/2501]    eta: 0:16:05  time: 0.1228  data_time: 0.0746  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  52/2501]    eta: 0:15:50  time: 0.0612  data_time: 0.0131  memory: 385  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  53/2501]    eta: 0:15:35  time: 0.0620  data_time: 0.0132  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  54/2501]    eta: 0:15:22  time: 0.0628  data_time: 0.0136  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  55/2501]    eta: 0:15:08  time: 0.0635  data_time: 0.0137  memory: 350  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  56/2501]    eta: 0:14:56  time: 0.0642  data_time: 0.0140  memory: 350  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  57/2501]    eta: 0:14:42  time: 0.0641  data_time: 0.0139  memory: 325  
09/23 09:23:57 - mmengine - INFO - Epoch(test) [  58/2501]    eta: 0:14:31  time: 0.0652  data_time: 0.0144  memory: 350  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  59/2501]    eta: 0:14:20  time: 0.0661  data_time: 0.0145  memory: 325  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  60/2501]    eta: 0:14:08  time: 0.0668  data_time: 0.0148  memory: 343  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  61/2501]    eta: 0:13:57  time: 0.0674  data_time: 0.0150  memory: 330  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  62/2501]    eta: 0:13:47  time: 0.0684  data_time: 0.0153  memory: 305  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  63/2501]    eta: 0:13:36  time: 0.0683  data_time: 0.0151  memory: 355  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  64/2501]    eta: 0:13:25  time: 0.0680  data_time: 0.0147  memory: 355  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  65/2501]    eta: 0:13:15  time: 0.0679  data_time: 0.0147  memory: 325  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  66/2501]    eta: 0:13:04  time: 0.0679  data_time: 0.0148  memory: 330  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  67/2501]    eta: 0:12:55  time: 0.0682  data_time: 0.0150  memory: 350  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  68/2501]    eta: 0:12:45  time: 0.0681  data_time: 0.0150  memory: 325  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  69/2501]    eta: 0:12:35  time: 0.0681  data_time: 0.0151  memory: 337  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  70/2501]    eta: 0:12:26  time: 0.0682  data_time: 0.0151  memory: 291  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  71/2501]    eta: 0:12:16  time: 0.0678  data_time: 0.0147  memory: 325  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  72/2501]    eta: 0:12:07  time: 0.0665  data_time: 0.0140  memory: 325  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  73/2501]    eta: 0:11:59  time: 0.0662  data_time: 0.0137  memory: 343  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  74/2501]    eta: 0:11:50  time: 0.0657  data_time: 0.0135  memory: 337  
09/23 09:23:58 - mmengine - INFO - Epoch(test) [  75/2501]    eta: 0:11:42  time: 0.0649  data_time: 0.0132  memory: 355  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  76/2501]    eta: 0:11:34  time: 0.0645  data_time: 0.0129  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  77/2501]    eta: 0:11:26  time: 0.0645  data_time: 0.0129  memory: 355  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  78/2501]    eta: 0:11:19  time: 0.0644  data_time: 0.0128  memory: 371  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  79/2501]    eta: 0:11:11  time: 0.0644  data_time: 0.0128  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  80/2501]    eta: 0:11:04  time: 0.0644  data_time: 0.0128  memory: 355  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  81/2501]    eta: 0:10:57  time: 0.0644  data_time: 0.0128  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  82/2501]    eta: 0:10:50  time: 0.0644  data_time: 0.0128  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  83/2501]    eta: 0:10:44  time: 0.0643  data_time: 0.0127  memory: 350  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  84/2501]    eta: 0:10:37  time: 0.0643  data_time: 0.0127  memory: 332  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  85/2501]    eta: 0:10:31  time: 0.0638  data_time: 0.0121  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  86/2501]    eta: 0:10:24  time: 0.0636  data_time: 0.0121  memory: 330  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  87/2501]    eta: 0:10:18  time: 0.0636  data_time: 0.0121  memory: 350  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  88/2501]    eta: 0:10:12  time: 0.0634  data_time: 0.0121  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  89/2501]    eta: 0:10:06  time: 0.0635  data_time: 0.0121  memory: 355  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  90/2501]    eta: 0:10:01  time: 0.0635  data_time: 0.0121  memory: 350  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  91/2501]    eta: 0:09:55  time: 0.0629  data_time: 0.0118  memory: 298  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  92/2501]    eta: 0:09:51  time: 0.0627  data_time: 0.0115  memory: 325  
09/23 09:23:59 - mmengine - INFO - Epoch(test) [  93/2501]    eta: 0:09:47  time: 0.0629  data_time: 0.0114  memory: 357  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  94/2501]    eta: 0:09:42  time: 0.0632  data_time: 0.0112  memory: 355  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  95/2501]    eta: 0:09:38  time: 0.0628  data_time: 0.0109  memory: 350  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  96/2501]    eta: 0:09:34  time: 0.0626  data_time: 0.0105  memory: 325  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  97/2501]    eta: 0:09:30  time: 0.0624  data_time: 0.0104  memory: 325  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  98/2501]    eta: 0:09:26  time: 0.0629  data_time: 0.0103  memory: 355  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [  99/2501]    eta: 0:09:22  time: 0.0636  data_time: 0.0107  memory: 325  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 100/2501]    eta: 0:09:18  time: 0.0645  data_time: 0.0108  memory: 325  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 101/2501]    eta: 0:09:14  time: 0.0652  data_time: 0.0112  memory: 325  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 102/2501]    eta: 0:09:11  time: 0.0654  data_time: 0.0112  memory: 350  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 103/2501]    eta: 0:09:07  time: 0.0652  data_time: 0.0114  memory: 385  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 104/2501]    eta: 0:09:04  time: 0.0651  data_time: 0.0114  memory: 355  
09/23 09:24:00 - mmengine - INFO - Epoch(test) [ 105/2501]    eta: 0:09:00  time: 0.0646  data_time: 0.0114  memory: 371  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 106/2501]    eta: 0:08:56  time: 0.0645  data_time: 0.0114  memory: 292  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 107/2501]    eta: 0:08:53  time: 0.0650  data_time: 0.0117  memory: 385  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 108/2501]    eta: 0:08:50  time: 0.0648  data_time: 0.0117  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 109/2501]    eta: 0:08:47  time: 0.0648  data_time: 0.0120  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 110/2501]    eta: 0:08:44  time: 0.0649  data_time: 0.0120  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 111/2501]    eta: 0:08:41  time: 0.0652  data_time: 0.0123  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 112/2501]    eta: 0:08:38  time: 0.0651  data_time: 0.0124  memory: 350  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 113/2501]    eta: 0:08:35  time: 0.0655  data_time: 0.0125  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 114/2501]    eta: 0:08:32  time: 0.0662  data_time: 0.0127  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 115/2501]    eta: 0:08:29  time: 0.0668  data_time: 0.0129  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 116/2501]    eta: 0:08:26  time: 0.0676  data_time: 0.0133  memory: 325  
09/23 09:24:01 - mmengine - INFO - Epoch(test) [ 117/2501]    eta: 0:08:24  time: 0.0681  data_time: 0.0133  memory: 325  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 118/2501]    eta: 0:08:21  time: 0.0690  data_time: 0.0136  memory: 325  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 119/2501]    eta: 0:08:18  time: 0.0697  data_time: 0.0137  memory: 350  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 120/2501]    eta: 0:08:16  time: 0.0704  data_time: 0.0140  memory: 325  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 121/2501]    eta: 0:08:13  time: 0.0713  data_time: 0.0145  memory: 325  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 122/2501]    eta: 0:08:11  time: 0.0721  data_time: 0.0148  memory: 357  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 123/2501]    eta: 0:08:08  time: 0.0730  data_time: 0.0151  memory: 350  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 124/2501]    eta: 0:08:06  time: 0.0739  data_time: 0.0155  memory: 350  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 125/2501]    eta: 0:08:03  time: 0.0746  data_time: 0.0158  memory: 325  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 126/2501]    eta: 0:08:01  time: 0.0754  data_time: 0.0162  memory: 330  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 127/2501]    eta: 0:07:59  time: 0.0762  data_time: 0.0165  memory: 319  
09/23 09:24:02 - mmengine - INFO - Epoch(test) [ 128/2501]    eta: 0:07:56  time: 0.0769  data_time: 0.0168  memory: 350  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 129/2501]    eta: 0:07:54  time: 0.0776  data_time: 0.0171  memory: 350  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 130/2501]    eta: 0:07:51  time: 0.0782  data_time: 0.0174  memory: 355  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 131/2501]    eta: 0:07:49  time: 0.0787  data_time: 0.0178  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 132/2501]    eta: 0:07:46  time: 0.0788  data_time: 0.0179  memory: 350  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 133/2501]    eta: 0:07:43  time: 0.0788  data_time: 0.0179  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 134/2501]    eta: 0:07:40  time: 0.0788  data_time: 0.0180  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 135/2501]    eta: 0:07:38  time: 0.0795  data_time: 0.0180  memory: 330  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 136/2501]    eta: 0:07:36  time: 0.0803  data_time: 0.0180  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 137/2501]    eta: 0:07:34  time: 0.0812  data_time: 0.0181  memory: 350  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 138/2501]    eta: 0:07:32  time: 0.0815  data_time: 0.0184  memory: 358  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 139/2501]    eta: 0:07:29  time: 0.0815  data_time: 0.0185  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 140/2501]    eta: 0:07:27  time: 0.0815  data_time: 0.0185  memory: 343  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 141/2501]    eta: 0:07:25  time: 0.0823  data_time: 0.0187  memory: 325  
09/23 09:24:03 - mmengine - INFO - Epoch(test) [ 142/2501]    eta: 0:07:23  time: 0.0824  data_time: 0.0187  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 143/2501]    eta: 0:07:21  time: 0.0822  data_time: 0.0188  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 144/2501]    eta: 0:07:19  time: 0.0815  data_time: 0.0188  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 145/2501]    eta: 0:07:16  time: 0.0811  data_time: 0.0187  memory: 355  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 146/2501]    eta: 0:07:14  time: 0.0804  data_time: 0.0187  memory: 343  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 147/2501]    eta: 0:07:12  time: 0.0796  data_time: 0.0184  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 148/2501]    eta: 0:07:09  time: 0.0789  data_time: 0.0183  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 149/2501]    eta: 0:07:07  time: 0.0781  data_time: 0.0179  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 150/2501]    eta: 0:07:05  time: 0.0773  data_time: 0.0178  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 151/2501]    eta: 0:07:03  time: 0.0766  data_time: 0.0174  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 152/2501]    eta: 0:07:00  time: 0.0758  data_time: 0.0173  memory: 350  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 153/2501]    eta: 0:06:58  time: 0.0752  data_time: 0.0171  memory: 350  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 154/2501]    eta: 0:06:56  time: 0.0745  data_time: 0.0167  memory: 350  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 155/2501]    eta: 0:06:54  time: 0.0742  data_time: 0.0165  memory: 385  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 156/2501]    eta: 0:06:52  time: 0.0738  data_time: 0.0165  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 157/2501]    eta: 0:06:51  time: 0.0741  data_time: 0.0165  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 158/2501]    eta: 0:06:49  time: 0.0740  data_time: 0.0164  memory: 325  
09/23 09:24:04 - mmengine - INFO - Epoch(test) [ 159/2501]    eta: 0:06:48  time: 0.0740  data_time: 0.0164  memory: 357  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 160/2501]    eta: 0:06:46  time: 0.0739  data_time: 0.0164  memory: 337  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 161/2501]    eta: 0:06:45  time: 0.0739  data_time: 0.0163  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 162/2501]    eta: 0:06:44  time: 0.0738  data_time: 0.0163  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 163/2501]    eta: 0:06:42  time: 0.0737  data_time: 0.0165  memory: 350  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 164/2501]    eta: 0:06:40  time: 0.0731  data_time: 0.0162  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 165/2501]    eta: 0:06:39  time: 0.0724  data_time: 0.0157  memory: 355  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 166/2501]    eta: 0:06:37  time: 0.0718  data_time: 0.0154  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 167/2501]    eta: 0:06:35  time: 0.0712  data_time: 0.0151  memory: 350  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 168/2501]    eta: 0:06:33  time: 0.0706  data_time: 0.0148  memory: 355  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 169/2501]    eta: 0:06:32  time: 0.0702  data_time: 0.0150  memory: 385  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 170/2501]    eta: 0:06:30  time: 0.0699  data_time: 0.0150  memory: 294  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 171/2501]    eta: 0:06:29  time: 0.0691  data_time: 0.0146  memory: 331  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 172/2501]    eta: 0:06:27  time: 0.0683  data_time: 0.0143  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 173/2501]    eta: 0:06:25  time: 0.0678  data_time: 0.0143  memory: 325  
09/23 09:24:05 - mmengine - INFO - Epoch(test) [ 174/2501]    eta: 0:06:24  time: 0.0674  data_time: 0.0143  memory: 347  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 175/2501]    eta: 0:06:22  time: 0.0666  data_time: 0.0139  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 176/2501]    eta: 0:06:20  time: 0.0658  data_time: 0.0135  memory: 350  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 177/2501]    eta: 0:06:19  time: 0.0653  data_time: 0.0135  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 178/2501]    eta: 0:06:17  time: 0.0649  data_time: 0.0135  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 179/2501]    eta: 0:06:16  time: 0.0641  data_time: 0.0132  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 180/2501]    eta: 0:06:14  time: 0.0639  data_time: 0.0132  memory: 357  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 181/2501]    eta: 0:06:13  time: 0.0638  data_time: 0.0131  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 182/2501]    eta: 0:06:12  time: 0.0640  data_time: 0.0133  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 183/2501]    eta: 0:06:10  time: 0.0640  data_time: 0.0133  memory: 385  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 184/2501]    eta: 0:06:08  time: 0.0640  data_time: 0.0133  memory: 355  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 185/2501]    eta: 0:06:07  time: 0.0633  data_time: 0.0132  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 186/2501]    eta: 0:06:06  time: 0.0629  data_time: 0.0136  memory: 350  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 187/2501]    eta: 0:06:04  time: 0.0622  data_time: 0.0137  memory: 358  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 188/2501]    eta: 0:06:03  time: 0.0630  data_time: 0.0139  memory: 325  
09/23 09:24:06 - mmengine - INFO - Epoch(test) [ 189/2501]    eta: 0:06:02  time: 0.0637  data_time: 0.0141  memory: 331  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 190/2501]    eta: 0:06:01  time: 0.0645  data_time: 0.0145  memory: 350  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 191/2501]    eta: 0:06:00  time: 0.0638  data_time: 0.0144  memory: 350  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 192/2501]    eta: 0:05:58  time: 0.0630  data_time: 0.0143  memory: 355  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 193/2501]    eta: 0:05:57  time: 0.0624  data_time: 0.0140  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 194/2501]    eta: 0:05:56  time: 0.0623  data_time: 0.0139  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 195/2501]    eta: 0:05:54  time: 0.0623  data_time: 0.0139  memory: 343  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 196/2501]    eta: 0:05:53  time: 0.0624  data_time: 0.0139  memory: 381  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 197/2501]    eta: 0:05:52  time: 0.0627  data_time: 0.0142  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 198/2501]    eta: 0:05:50  time: 0.0627  data_time: 0.0142  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 199/2501]    eta: 0:05:49  time: 0.0627  data_time: 0.0142  memory: 350  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 200/2501]    eta: 0:05:48  time: 0.0626  data_time: 0.0142  memory: 337  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 201/2501]    eta: 0:05:46  time: 0.0626  data_time: 0.0142  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 202/2501]    eta: 0:05:45  time: 0.0626  data_time: 0.0141  memory: 355  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 203/2501]    eta: 0:05:44  time: 0.0625  data_time: 0.0141  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 204/2501]    eta: 0:05:43  time: 0.0629  data_time: 0.0145  memory: 357  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 205/2501]    eta: 0:05:41  time: 0.0629  data_time: 0.0145  memory: 343  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 206/2501]    eta: 0:05:40  time: 0.0627  data_time: 0.0142  memory: 361  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 207/2501]    eta: 0:05:39  time: 0.0616  data_time: 0.0138  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 208/2501]    eta: 0:05:38  time: 0.0609  data_time: 0.0135  memory: 325  
09/23 09:24:07 - mmengine - INFO - Epoch(test) [ 209/2501]    eta: 0:05:36  time: 0.0600  data_time: 0.0130  memory: 350  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 210/2501]    eta: 0:05:35  time: 0.0592  data_time: 0.0126  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 211/2501]    eta: 0:05:34  time: 0.0584  data_time: 0.0123  memory: 319  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 212/2501]    eta: 0:05:33  time: 0.0577  data_time: 0.0120  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 213/2501]    eta: 0:05:32  time: 0.0569  data_time: 0.0115  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 214/2501]    eta: 0:05:30  time: 0.0567  data_time: 0.0115  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 215/2501]    eta: 0:05:29  time: 0.0566  data_time: 0.0115  memory: 350  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 216/2501]    eta: 0:05:28  time: 0.0564  data_time: 0.0115  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 217/2501]    eta: 0:05:27  time: 0.0562  data_time: 0.0115  memory: 350  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 218/2501]    eta: 0:05:26  time: 0.0560  data_time: 0.0115  memory: 325  
09/23 09:24:08 - mmengine - INFO - Epoch(test) [ 219/2501]    eta: 0:05:25  time: 0.0557  data_time: 0.0112  memory: 350  

Process finished with exit code 143
