syntax = "proto3";

package brain;

import "google/protobuf/empty.proto";

option go_package = "dlrover/go/brain/pkg/proto";

message TrainingHyperParams {
  int64 batch_size = 1;
  int64 epoch = 2;
  int64 max_steps = 3;
}

message WorkflowFeature {
  string job_name = 1;
  string user_id = 2;
  string code_address = 3;
  string workflow_id = 4;
  string node_id = 5;
  string odps_project = 6;
  bool is_prod = 7;
}

message TrainingSetFeature {
  int64 dataset_size = 1;
  string dataset_name = 2;
  int64 sparse_item_count = 3;
  string sparse_features = 4;
  string sparse_feature_groups = 5;
  string sparse_feature_shapes = 6;
  string dense_features = 7;
  string dense_feature_shapes = 8;
  int64 storage_size = 9;
}

message ModelFeature {
  int64 variable_count = 1;
  int64 op_count = 2;
  int64 embedding_dimension = 3;
  int64 total_variable_size = 4;
  int64 max_variable_size = 5;
  int64 update_op_count = 6;
  int64 read_op_count = 7;
  int64 input_fetch_dur = 8;
  int64 flops = 9;
  int64 recv_op_count = 10;
  repeated int64 kv_embedding_dims = 11;
  map<string, int64> tensor_alloc_bytes = 12;
}

message RuntimeInfo {
  int64 global_step = 1;
  repeated PodMeta running_pods = 2;
  int64 time_stamp = 3;
  float speed = 4;
}

message PodMeta {
  string pod_name = 1;
  string pod_ip = 2;
  string node_ip = 3;
  string host_name = 4;
  string namespace = 5;
  bool is_mixed = 6;
  double mem_usage = 7;
  double cpu_usage = 8;
}

message JobMeta {
  string uuid = 1;      // The uuid of k8s training job
  string name = 2;      // The name of k8s training job
  string user = 3;      // The user id of k8s training job
  string cluster = 4;   // The cluster of k8s training job
  string namespace = 5; // The namespace of k8s training job
}

enum MetricsType {
  Training_Hyper_Params = 0;
  Workflow_Feature = 1;
  Training_Set_Feature = 2;
  Model_Feature = 3;
  Runtime_Info = 4;
  Job_Exit_Reason = 5;
  Optimization_Result = 6;
  Type = 7;
  Resource = 8;
  Customized_Data = 9;
  Optimization = 10;
}

message JobMetrics {
  string data_store = 1;
  JobMeta job_meta = 2;
  MetricsType metrics_type = 3;
  oneof metrics {
    TrainingHyperParams training_hyper_params = 4;
    WorkflowFeature workflow_feature = 5;
    TrainingSetFeature training_set_feature = 6;
    ModelFeature model_feature = 7;
    RuntimeInfo runtime_info = 8;
    string job_exit_reason = 9;
    string extra_info = 10;
    string type = 11;
    string resource = 12;
    string customized_data = 13;
    JobOptimization job_optimization = 14;
  }
}

message OptimizeConfig {
  string optimizer_config_retriever = 1;
  string data_store = 2;
  string brain_processor = 3;
  map<string, string> customized_config = 4;
}

message PodState {
  string name = 1;
  string uid = 2;
  string type = 3;
  bool is_oom = 4;
  PodResource resource = 5;
  PodResource used_resource = 6;
  map<string, string> customized_data = 7;
}

message JobState {
  int64 timestamp = 1;
  map<string, PodState> pods = 2;
  float speed = 3;
  map<string, string> customized_data = 4;
}

message OptimizeJobMeta {
  string uid = 1;
  string cluster = 2;
  string namespace = 3;
  JobState state = 4;
}

message OptimizeRequest {
  string type = 1;
  OptimizeConfig config = 2;
  repeated OptimizeJobMeta jobs = 3;
}

message PodResource {
  int64 memory = 1; // unit MB
  float cpu = 2;    // The number of cores
  float gpu = 3;
  string gpu_type = 4;
  string priority = 5;
}

message TaskGroupResource {
  int64 count = 1;
  PodResource resource = 2;
}

message JobResource {
  map<string, TaskGroupResource> task_group_resources = 1;
  map<string, PodResource> pod_resources = 2;
}

message JobOptimizePlan {
  uint64 timestamp = 1;
  JobResource resource = 2;
  OptimizeJobMeta job = 3;
}

message JobOptimization {
  int64 timestamp = 1;
  OptimizeConfig config = 2;
  JobOptimizePlan plan = 3;
  repeated JobState job_states = 4;
}

message Response {
  bool success = 1;
  string reason = 2;
}

message OptimizeResponse {
  Response response = 1;
  repeated JobOptimizePlan job_optimize_plans = 2;
}

message JobMetricsRequest { string job_uuid = 1; }

message JobMetricsResponse {
  Response response = 1;
  string job_metrics = 2;
}

service Brain {
  rpc persist_metrics(JobMetrics) returns (google.protobuf.Empty);
  rpc optimize(OptimizeRequest) returns (OptimizeResponse);
  rpc get_job_metrics(JobMetricsRequest) returns (JobMetricsResponse);
}
